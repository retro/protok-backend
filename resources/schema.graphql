enum OrganizationMembershipRole {
  OWNER
  ADMIN
  MEMBER
} 

type Account {
  id: ID!
  email: String!
  username: String!
  organizationMemberships: [OrganizationMembership]
}

type Session {
  token: String!
  account: Account!
}

type Organization {
  id: ID!
  name: String!
  membership: OrganizationMembership!
  projects: [Project]
}

type OrganizationMembership {
  memberRole: OrganizationMembershipRole!
  organization: Organization!
}

type Project {
  id: ID!
  name: String!
  organization: Organization!
  flows: [Flow]
}

type Flow {
  id: ID!
  name: String!
  description: String
  project: Project!
  nodes: [FlowNode]
}

input CreateOrganizationInput {
  name: String!
}

input UpdateOrganizationInput {
  name: String!
  id: ID!
}

input CreateProjectInput {
  name: String!
  organizationId: ID!
}

input UpdateProjectInput {
  name: String!
  id: ID!
}

input CreateFlowInput {
  name: String!
  description: String
  projectId: ID!
}

input UpdateFlowInput {
  name: String!
  description: String
  id: ID!
}

enum FlowNodeType {
  EVENT
  SCREEN
  SWITCH
  FLOW_REF
}

interface FlowNode {
  id: ID!
  flow: Flow!
  isEntrypoint: Boolean!
  type: FlowNodeType!
}

type FlowEvent implements FlowNode {
  id: ID!
  flow: Flow!
  isEntrypoint: Boolean!
  type: FlowNodeType!
  name: String!
  description: String
  targetFlowNode: FlowNode
}

input CreateFlowEventInput {
  flowId: ID!
  isEntrypoint: Boolean
  name: String!
  description: String
  targetFlowNodeId: ID
}

input UpdateFlowEventInput {
  id: ID!
  isEntrypoint: Boolean
  name: String!
  description: String
  targetFlowNodeId: ID
}

type FlowScreen implements FlowNode {
  id: ID!
  flow: Flow!
  isEntrypoint: Boolean!
  type: FlowNodeType!
  name: String!
  description: String
  hotspots: [FlowScreenHotspot]
}

input CreateFlowScreenInput {
  flowId: ID!
  isEntrypoint: Boolean
  name: String!
  description: String
}

input UpdateFlowScreenInput {
  id: ID!
  isEntrypoint: Boolean
  name: String!
  description: String
}

type FlowScreenHotspot {
  id: ID!
  name: String!
  description: String
  coordinates: FlowScreenHotspotCoordinates
  dimensions: FlowScreenHotspotDimensions
  targetFlowNode: FlowNode
}

type FlowScreenHotspotCoordinates {
  top: Float
  bottom: Float
  left: Float
  right: Float
}

type FlowScreenHotspotDimensions {
  width: Float
  height: Float
}

input CreateFlowScreenHotspotInput {
  flowNodeId: ID!
  name: String!
  description: String
  targetFlowNodeId: ID
  coordinates: FlowScreenHotspotCoordinatesInput
  dimensions: FlowScreenHotspotDimensionsInput
}

input UpdateFlowScreenHotspotInput {
  id: ID!
  name: String!
  description: String
  targetFlowNodeId: ID
  coordinates: FlowScreenHotspotCoordinatesInput
  dimensions: FlowScreenHotspotDimensionsInput
}

input FlowScreenHotspotCoordinatesInput {
  top: Float
  bottom: Float
  left: Float
  right: Float
}

input FlowScreenHotspotDimensionsInput {
  width: Float
  height: Float
}

type FlowSwitch implements FlowNode {
  id: ID!
  flow: Flow!
  isEntrypoint: Boolean!,
  type: FlowNodeType!
  name: String!
  description: String
  options: [FlowSwitchOption]
}

input CreateFlowSwitchInput {
  flowId: ID!
  isEntrypoint: Boolean
  name: String!
  description: String
}

input UpdateFlowSwitchInput {
  id: ID!
  isEntrypoint: Boolean
  name: String!
  description: String
}

type FlowSwitchOption {
  id: ID!
  name: String!
  description: String
  targetFlowNode: FlowNode
}

input CreateFlowSwitchOptionInput {
  flowNodeId: ID!
  name: String
  description: String
  targetFlowNodeId: ID
}

input UpdateFlowSwitchOptionInput {
  id: ID!
  flowNodeId: ID
  name: String
  description: String
  targetFlowNodeId: ID
}

type FlowFlowRef implements FlowNode {
  id: ID!
  flow: Flow!
  isEntrypoint: Boolean!
  type: FlowNodeType!
  targetFlow: Flow
}

input CreateFlowFlowRefInput {
  flowId: ID!
  isEntrypoint: Boolean
  targetFlowId: ID!
}

input UpdateFlowFlowRefInput {
  id: ID!
  isEntrypoint: Boolean
  targetFlowId: ID!
}

type Query {
  currentAccount: Account

  fetchOrganization(id:ID!): Organization
  fetchProject(id:ID!): Project
  fetchFlow(id:ID!): Flow

  fetchFlowNode(id: ID!): FlowNode
  
  fetchFlowScreenHotspot(id: ID!): FlowScreenHotspot
}

type Mutation {
  requestLoginCode(email:String!): Boolean
  loginWithCode(email:String!, code:String): Session

  createOrganization(input: CreateOrganizationInput!): Organization
  updateOrganization(input: UpdateOrganizationInput!): Organization
  deleteOrganization(id: ID!): Boolean!

  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(id: ID!): Boolean!

  createFlow(input: CreateFlowInput!): Flow
  updateFlow(input: UpdateFlowInput!): Flow
  deleteFlow(id: ID!): Boolean!

  createFlowScreen(input: CreateFlowScreenInput!): FlowScreen
  updateFlowScreen(input: UpdateFlowScreenInput!): FlowScreen

  createFlowEvent(input: CreateFlowEventInput!): FlowEvent
  updateFlowEvent(input: UpdateFlowEventInput!): FlowEvent

  createFlowSwitch(input: CreateFlowSwitchInput!): FlowSwitch
  updateFlowSwitch(input: UpdateFlowSwitchInput!): FlowSwitch

  createFlowFlowRef(input: CreateFlowFlowRefInput!): FlowFlowRef
  updateFlowFlowRef(input: UpdateFlowFlowRefInput!): FlowFlowRef

  deleteFlowNode(id: ID!): Boolean!

  createFlowScreenHotspot(input: CreateFlowScreenHotspotInput!): FlowScreenHotspot
  updateFlowScreenHotspot(input: UpdateFlowScreenHotspotInput!): FlowScreenHotspot
  deleteFlowScreenHotspot(id: ID!): Boolean!

  createFlowSwitchOption(input: CreateFlowSwitchOptionInput!): FlowSwitchOption
  updateFlowSwitchOption(input: UpdateFlowSwitchOptionInput!): FlowSwitchOption
  deleteFlowSwitchOption(id: ID!): Boolean!
}
