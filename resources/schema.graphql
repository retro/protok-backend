enum OrganizationMembershipRole {
  OWNER
  ADMIN
  MEMBER
} 

type Account {
  id: ID!
  email: String!
  username: String!
  organizationMemberships: [OrganizationMembership]
}

type Session {
  token: String!
  account: Account!
}

type Organization {
  id: ID!
  name: String!
  membership: OrganizationMembership!
  projects: [Project]
}

type OrganizationMembership {
  memberRole: OrganizationMembershipRole!
  organization: Organization!
}

type Project {
  id: ID!
  name: String!
  organization: Organization!
}

input CreateOrganizationInput {
  name: String!
}

input UpdateOrganizationInput {
  name: String!
  id: ID!
}

input CreateProjectInput {
  name: String!
  organizationId: ID!
}

input UpdateProjectInput {
  name: String!
  id: ID!
}


type Query {
  currentAccount: Account
  fetchOrganizationById(id:ID!): Organization
  fetchProjectById(id:ID!): Project
}

type Mutation {
  requestLoginCode(email:String!): Boolean
  loginWithCode(email:String!, code:String): Session
  createOrganization(organization: CreateOrganizationInput!): Organization
  updateOrganization(organization: UpdateOrganizationInput!): Organization
  createProject(project: CreateProjectInput!): Project
  updateProject(project: UpdateProjectInput!): Project
}
